<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_qm1_rg2_lr">
  <title>BaseX: Enabling Search and Link Management</title>
  <shortdesc>The BaseX system is an XQuery-based XML database that provides powerful search features for XML.</shortdesc>
  <body>
    <p>The DFST model uses an XQuery database to provide link management and DITA-aware search features. Any XQuery database can be used bu the DFST project provides materials for using the BaseX database. Note that in the DFST model, the XQuery database is used only as a read-only database to enable search and link management, it is <b>not</b> used to manage the source documents. Source document management is done in a separate source code repository (e.g., git) that provides the required version control and distributed access features.</p>
    <p>BaseX is a light-weight, pure-Java XQuery database that is easy to install and use, making it appropriate for use on individual Authors' workstations. It provides a built-in Web server as well as a general database server that can be accessed using special BaseX clients.</p>
    <p>DITA content is loaded to BaseX through the use of git commit hooks (provided by the DITA for Small Teams project) that load the DITA content to the BaseX repository whenever it is committed to the git repository. These commit hooks keep the BaseX repository in sync with the main content repository.</p>
    <p>The DFST uses the BaseX HTTP server, which provides both a standard BaseX server and an HTTP server that enables Web access to the database.</p>
    <p>The basic process for setting up BaseX is:<ol
      id="ol_eh4_5gk_lr">
      <li>Install the BaseX HTTP server package</li>
      <li>Set the BaseX configuration file so DITA documents are parsed correctly against the DITA DTDs managed by a DITA Open Toolkit.</li>
      <li>Start the BaseX HTTP server</li>
      <li>Set up the BaseX git hooks to automatically copy documents to the BaseX database</li>
      <li>Test your setup to make sure everything is hooked up correctly</li>
      </ol></p>
    <p>Once you have BaseX running you can test the configuration using a temporary database. It's easy to create a new database and add documents to it using the BaseX command-line client or the BaseX Web adminstration client.</p>
  </body>
  <topic
    id="topic_kky_g32_lr">
    <title>Install BaseX</title>
    <body>
      <p>Installers are available for Windows (.exe download) and Mac (via Homebrew). You can also download the Zip package and simply unzip it somewhere and add the <filepath>bin/</filepath> directory to your PATH environment variable.</p>
      <p>The build-in BaseX user is "admin" with a password of "admin". If security is a concern you should at least change the administrator password if not create a separate user account for use by the git commit hooks.</p>
      <note>If you are installing on Windows, the BaseX shell scripts will not be installed. However, these scripts can be used from the git command window that is part of the git Windows support. You can get these scripts from the BaseX Zip distribution and simply copy them into the BaseX bin directory.</note>
    </body>
  </topic>
  <topic
    id="topic_jgj_ndk_lr">
    <title>One-Time BaseX Setup</title>
    <body>
      <p>In order to manage DITA documents properly, BaseX must be configured to use an XML catalog and to turn on DTD parsing. For DITA use you will normally use the <filepath>catalog-dita.xml</filepath> file maintained by the DITA Open Toolkit. </p>
      <p>To configure BaseX to parse DITA documents, update the BaseX configuration file <filepath>.basex</filepath> in the BaseX installation directory:</p>
      <ol
        id="ol_xkc_tdk_lr">
        <li>Find the location of the DITA Open Toolkit you will use to manage the master XML catalog file for your DITA documents.<p>If this is the Open Toolkit integrated with oXygenXML, the toolkit will be in the <filepath>frameworks/dita/DITA-OT</filepath> directory under the oXygenXML installation directory.</p><p>You will need the absolute path of the Open Toolkit directory, e.g., <filepath>/Applications/oxygen/frameworks/dita/DITA-OT</filepath> or <filepath>C:\Program Files\Oxygen XML Editor 16\frameworks\dita\DITA-OT</filepath>.</p></li>
        <li>Find the BaseX installation directory.<p>The exact location will depend on your operating system and how you installed it. The default location on Windows is <filepath>C:\Program Files (x86)\BaseX</filepath>. For OS X and Linux the command <codeph>which basexhttp</codeph> should show the location (the value returned will include the <filepath>bin/</filepath> directoryâ€”you want the parent of the <filepath>bin/</filepath> directory).</p></li>
        <li>Edit the file <filepath>.basex</filepath> in a text editor and add the following lines at the end of the file:<codeblock>CATFILE = <varname>OT directory</varname>/catalog-dita.xml
DTD = true
CHOP = false</codeblock><p>Where <varname>OT directory</varname> is the Open Toolkit directory you got in Step 1.</p><p>On OS X, my .basex file looks like this:<codeblock># General Options
DEBUG = false
DBPATH = /Users/ekimber/apps/basex/data
REPOPATH = /Users/ekimber/apps/basex/repo
LANG = English
LANGKEYS = false
GLOBALLOCK = false

# Client/Server Architecture
HOST = localhost
PORT = 1984
SERVERPORT = 1984
EVENTPORT = 1985
USER = 
PASSWORD = 
SERVERHOST = 
PROXYHOST = 
PROXYPORT = 0
NONPROXYHOSTS = 
TIMEOUT = 30
KEEPALIVE = 600
PARALLEL = 8
LOG = true
LOGMSGMAXLEN = 1000

# HTTP Services
WEBPATH = /Users/ekimber/apps/basex/webapp
RESTXQPATH = 
HTTPLOCAL = false
STOPPORT = 8985
AUTHMETHOD = Basic

# Local Options
CATFILE = /Applications/oxygen/frameworks/dita/DITA-OT/catalog-dita.xml
DTD = true
CHOP = false</codeblock></p><p>On Windows, the CATFILE option looks like this:<codeblock>CATFILE = C:\Program Files\Oxygen XML Editor 16\frameworks\dita\DITA-OT\catalog-dita.xml</codeblock></p></li>
        <li>Save the file.</li>
      </ol>
      <p>To test this configuration you'll need to have a database, add a DITA document to it, and verify that all the default attributes were expanded on load. One indication that the configuration is correct is if it takes noticeable time to load DITA documents: BaseX has to fetch the DTDs and parse the documents with respect to them, which is much slower than just loading the XML without validating first.</p>
      <p>There is one remaining setup task for which you need a running BaseX server: installing the DFST XQuery modules.</p>
    </body>
  </topic>
  <topic
    id="topic_ayl_c3j_lr">
    <title>Start the BaseX HTTP Server</title>
    <body>
      <p>The DFST setup uses BaseX in two ways: through git commit hooks that update XML documents in the BaseX database and through a Web application that enables search and provides DITA link management services.</p>
      <p>To support this dual use of BaseX you must run the BaseX HTTP server. The BaseX HTTP server then provides both the BaseX server (accessed through BaseX clients, such as the BaseX command-line client) and the BaseX HTTP server. You can run the server as a background service.</p>
      <p>See the BaseX command-line options documentation for details. </p>
      <p>To start the BaseX HTTP server: <ul
        id="ul_j5x_hkj_lr">
        <li>OS X or Linux: Run the command <codeph>basexhttp -B</codeph> to start the server as a background service.</li>
        <li>Windows: Use the "Start BaseX server" item in the BaseX start menu or run the command <codeph>basexhttp -B</codeph> </li>
        </ul></p>
      <p>Once you have the HTTP server running you can connect to it in serveral ways, including using WebDAV, either from OxygenXML or from another WebDAV client. You should be able to set up the database as a WebDAV shared drive under all operating systems. See the BaseX documentation for details.</p>
      <p>The DFST git commit hooks use the BaseX command-line client to connect to the BaseX server. The DFST DITA link management Web application is accessed via normal HTTP through a Web browser.</p>
    </body>
  </topic>
  <topic
    id="topic_lgq_nfk_lr">
    <title>Create a BaseX Database and Load Some DITA Content</title>
    <body>
      <p>The BaseX server can manage any number of databases. A database is simply a named collection of XML documents.</p>
      <p>To test the BaseX setup you can try loading the "garage" samples that come with the Open Toolkit:<ol
        id="ol_al2_klk_lr">
        <li>Open a command window and run the command <codeph>basexclient</codeph>.<p>You should be prompted to enter the BaseX user ID and password (e.g., "admin", "admin").</p><p>If the command does not work, check your PATH environment variable or change directories to the BaseX <filepath>bin/</filepath> directory.</p><p>Once you have logged in you should see the BaseX command prompt:<codeblock>c:\>basexclient
Username: admin
Password:
BaseX 8.0.3 [Client]
Try help to get more information.

></codeblock></p></li>
        <li>Create a new database to hold the sample documents:<codeblock>> <b>create database samples</b>
Database 'samples' created in 23.95 ms.
></codeblock></li>
        <li>Use the <cmdname>list</cmdname> command to list the databases available:<codeblock>> <b>list</b>
Name     Resources  Size  Input Path
------------------------------------
samples  0          4532

1 database(s).
></codeblock></li>
        <li>Open the "samples" database to make it the current database:<codeblock>> <b>open samples</b>
Database 'samples' was opened in 0.02 ms.
></codeblock></li>
        <li>Add the samples documents to the database:<codeblock>> <b>add to samples c:\Program Files\Oxygen XML Editor 16\frameworks\dita\DITA-OT\samples</b>
Resource(s) added in 2092.7 ms.
></codeblock><p>Set the directory to wherever your Open Toolkit actually is.</p><p>The "<codeph>to samples</codeph>" part of the command adds the documents in the <filepath>samples</filepath> folder to a directory named "samples" in the database.</p><p>It should take a few seconds to load the documents. If the load was instantaneous, then the catalog and DTD parsing are not set up correctly.</p></li>
        <li>List the files in the database:<codeblock>> <b>list samples</b>
Input Path                                    Type  Content-Type     Size
-------------------------------------------------------------------------
samples/ant_sample/sample_all.xml             xml   application/xml  57
samples/ant_sample/sample_docbook.xml         xml   application/xml  42
samples/ant_sample/sample_eclipsehelp.xml     xml   application/xml  42
samples/ant_sample/sample_htmlhelp.xml        xml   application/xml  42
samples/ant_sample/sample_javahelp.xml        xml   application/xml  42
samples/ant_sample/sample_odt.xml             xml   application/xml  42
samples/ant_sample/sample_pdf.xml             xml   application/xml  42
samples/ant_sample/sample_tocjs.xml           xml   application/xml  42
samples/ant_sample/sample_troff.xml           xml   application/xml  42
samples/ant_sample/sample_wordrtf.xml         xml   application/xml  42
samples/ant_sample/sample_xhtml.xml           xml   application/xml  54
samples/ant_sample/sample_xhtml_plus_css.xml  xml   application/xml  73
samples/ant_sample/template_docbook.xml       xml   application/xml  38
samples/ant_sample/template_eclipsehelp.xml   xml   application/xml  38
samples/ant_sample/template_htmlhelp.xml      xml   application/xml  38
samples/ant_sample/template_javahelp.xml      xml   application/xml  38
samples/ant_sample/template_odt.xml           xml   application/xml  38
samples/ant_sample/template_pdf.xml           xml   application/xml  38
samples/ant_sample/template_wordrtf.xml       xml   application/xml  38
samples/ant_sample/template_xhtml.xml         xml   application/xml  37
samples/concepts/garageconceptsoverview.xml   xml   application/xml  17
samples/concepts/lawnmower.xml                xml   application/xml  20
samples/concepts/oil.xml                      xml   application/xml  27
samples/concepts/paint.xml                    xml   application/xml  27
samples/concepts/shelving.xml                 xml   application/xml  27
samples/concepts/snowshovel.xml               xml   application/xml  27
samples/concepts/toolbox.xml                  xml   application/xml  32
samples/concepts/tools.xml                    xml   application/xml  67
samples/concepts/waterhose.xml                xml   application/xml  27
samples/concepts/wheelbarrow.xml              xml   application/xml  17
samples/concepts/workbench.xml                xml   application/xml  24
samples/concepts/wwfluid.xml                  xml   application/xml  20
samples/tasks/changingtheoil.xml              xml   application/xml  69
samples/tasks/garagetaskoverview.xml          xml   application/xml  17
samples/tasks/organizing.xml                  xml   application/xml  17
samples/tasks/shovellingsnow.xml              xml   application/xml  47
samples/tasks/spraypainting.xml               xml   application/xml  56
samples/tasks/takinggarbage.xml               xml   application/xml  39
samples/tasks/washingthecar.xml               xml   application/xml  68

Resources.
></codeblock></li>
        <li>Verify that the @class attributes were correctly expanded:<codeblock>> <b>xquery /*/@class</b>
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic concept/concept "
class="- topic/topic task/task "
class="- topic/topic concept/concept "
class="- topic/topic task/task "
class="- topic/topic task/task "
class="- topic/topic task/task "
class="- topic/topic task/task "
class="- topic/topic task/task "
Query executed in 2.57 ms.
></codeblock><p>This XQuery simply returns all the @class attributes of all the root elements in the database. If those elements have @class attributes then all the elements will.</p></li>
        </ol></p>
      <p>You have now verified that your BaseX server is correctly configured to manage DITA documents and is ready to get updates from your git repository.</p>
      <p>If you want, you can remove the samples database:<codeblock>> <b>drop database samples</b>
Database 'samples' was dropped.
> list
Name  Resources  Size  Input Path
---------------------------------

0 database(s).
></codeblock></p>
    </body>
  </topic>
  <topic
    id="topic_ann_zqk_lr">
    <title>Install DFST XQuery Modules</title>
    <body>
      <p>The DFST XQuery modules provide the DITA-specific link management and DITA-aware searching features you need.</p>
      <p>To install the modules, you run the script <filepath>install-modules.sh</filepath> or <filepath>install-modules.bat</filepath> from the <filepath>basex/scripts</filepath> directory:<ol
        id="ol_fkh_crk_lr">
        <li>Open a command window and navigate to the <filepath>basex/scripts/</filepath> directory:<codeblock>c:\>cd c:\projects\dita-for-small-teams\basex\scripts
</codeblock><p>Or</p><codeblock>
c:\projects\dita-for-small-teams\basex\scripts></codeblock></li>
        <li>Run the <filepath>install-modules</filepath> script:<codeblock>c:\projects\dita-for-small-teams\basex\scripts>install-modules.bat admin admin
Installing DFST XQuery packages:
Name                                                   Version  Type      Path
-----------------------------------------------------------------------------------------------------------------------------------
org.dita-for-small-teams.xquery.modules.dita-utils     -        Internal  org/dita-for-small-teams/xquery/modules/dita-utils.xqm
org.dita-for-small-teams.xquery.modules.relpath-utils  -        Internal  org/dita-for-small-teams/xquery/modules/relpath-utils.xqm

2 package(s).

c:\projects\dita-for-small-teams\basex\scripts></codeblock></li>
        </ol></p>
    </body>
  </topic>
  <topic
    id="topic_chf_my2_lr">
    <title>Set Up Git Commit Hooks for BaseX Update</title>
    <body>
      <p>The DFST git commit hooks for BaseX keep BaseX in sync with your git repository.</p>
      <p>Using the commit requires the following:<ul
        id="ul_xmz_zs5_mr">
        <li>The BaseX <filepath>bin/</filepath> directory must be in your PATH or Path environment variable. You should be able to type "basex" or "basexclient" on the command line. This allows the git hook scripts to run the required BaseX commands. You should have set this up when you installed BaseX.</li>
        <li>The BaseX server connection properties must be set in the <filepath>.basex</filepath> file. This file can be in the main BaseX installation directory or in your user home directory. This allows the basexclient command to connect and authenticate to the BaseX server without the need for a separate configuration file.</li>
        <li>The DFST git hooks must be copied to or linked from the <filepath>.git/hooks/</filepath> directory in the git repositories you want to manage. These hooks keep the BaseX databases in sync with your git repositories.</li>
        </ul></p>
      <p>To set up the git hooks, do the following:<ol
        id="ol_oh1_xs5_mr">
        <li>Edit the <filepath>.basex</filepath> configuration file, either in the main BaseX installation directory or in your home directory, and add the following settings:<codeblock>USER = admin
PASSWORD = admin
HOST = localhost
PORT = 1984</codeblock><p>These values are the BaseX default. Your configuration must reflect any changes you made from default after you installed BaseX.</p><p>For OS X: If you want to put the <filepath>.basex</filepath> configuration file in your home directory, you must delete the <filepath>.basexhome</filepath> from the BaseX installation directory, otherwise BaseX will not read the <filepath>.basex</filepath> file in your home directory.</p></li>
        <li>Copy the files from the DFST project <filepath>commit-hooks/git/</filepath> directory to the <filepath>.git/hooks</filepath> directory under the root directory of your git repository.<p>For OS X and Linux: Instead of copying the files you can link to the files in the DFST project. This makes it easier to keep the hooks updated. To do this, use the <cmdname>ln -s</cmdname> command like so:<codeblock>ekimber:project-01$ cd .git/hooks
ekimber:hooks$ ln -s ~/dita-for-small-teams/commit-hooks/git/basexLoadOrUpdateBranch
ekimber:hooks$ ln -s ~/dita-for-small-teams/commit-hooks/git/post-checkout
ekimber:hooks$ ln -s ~/dita-for-small-teams/commit-hooks/git/post-commit
ekimber:hooks$ ln -s ~/dita-for-small-teams/commit-hooks/git/post-merge
ekimber:hooks$ ln -s ~/dita-for-small-teams/commit-hooks/git/recordGitStateDetails
ekimber:hooks$ ln -s ~/dita-for-small-teams/commit-hooks/git/updateBaseXForCOmmitOrMerge</codeblock></p><p>For OS X and Linux: Make sure all the commit hook files are executeable. They should be as they come from the DFST git repository but they may not be for whatever reason. To make them executable, apply this command to the directory that contains the scripts:<codeblock>ekimber:dita-for-small-teams$ chmod a+x commit-hooks/git/*</codeblock></p></li>
        </ol></p>
    </body>
  </topic>
</topic>
